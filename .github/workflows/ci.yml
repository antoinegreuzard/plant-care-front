name: CI Frontend

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: 🛎️ Checkout le code du frontend
        uses: actions/checkout@v4

      - name: 🏗️ Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: 🔥 Nettoyer node_modules et le cache npm
        run: |
          rm -rf node_modules package-lock.json
          npm cache clean --force

      - name: 📦 Installer les dépendances
        run: npm install

      - name: 🔍 Vérification du code avec ESLint
        run: npm run lint

      - name: 🔍 Vérification du formatage avec Prettier
        run: npm run format

      - name: 🏗️ Vérification des types TypeScript
        run: npm run type-check

      - name: 🏗️ Construire l'application
        run: npm run build

      - name: 🧪 Lancer les tests unitaires avec Vitest
        run: npm run test:unit

      - name: 🏗️ Construire et tester l'image Docker
        run: |
          docker build -t plant-care-front .
          docker run --rm -d -p 5173:5173 --name plant-care-test plant-care-front
          echo "Attente de 5 secondes pour que Vite démarre..."
          sleep 5  # ⏳ Attendre avant de tester la connexion
          curl --fail http://localhost:5173 || (docker logs plant-care-test && exit 1)
          docker stop plant-care-test

  test-e2e-django:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: 🛎️ Checkout le code du frontend
        uses: actions/checkout@v4

      - name: 🏗️ Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: 🔥 Nettoyer node_modules et le cache npm
        run: |
          rm -rf node_modules package-lock.json
          npm cache clean --force

      - name: 📦 Installer les dépendances
        run: npm install

      - name: 🏗️ Lancer le build pour les tests E2E
        run: npm run build

      - name: 🛎️ Clone Django backend
        run: git clone ${{ secrets.DJANGO_BACKEND_REPO_URL }} backend-django

      - name: 🛠️ Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose

      - name: 🐳 Docker Compose up Django
        working-directory: backend-django
        run: docker-compose up -d

      - name: ⏳ Wait for Django to be ready
        run: |
          for i in {1..30}; do
            curl --fail http://localhost:8000/health && break
            echo "⏳ Django not ready yet..."
            sleep 5
          done

      - name: ⚙️ Migrations
        working-directory: backend-django
        run: |
          docker-compose exec -T backend python manage.py migrate
          docker-compose exec -T backend python manage.py shell <<EOF
          from django.contrib.auth import get_user_model
          User = get_user_model()
          if not User.objects.filter(username="testuser").exists():
              User.objects.create_superuser("testuser", "test@example.com", "testpassword")
              print("Superuser créé")
          else:
              print("Superuser déjà existant")
          EOF

      - name: 🚀 Preview app
        run: npm run preview &

      - name: 🧪 Cypress E2E with Django
        run: npm run test:e2e

  test-e2e-laravel:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: 🛎️ Checkout frontend
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: 🔥 Nettoyer node_modules et le cache npm
        run: |
          rm -rf node_modules package-lock.json
          npm cache clean --force

      - name: 📦 Install deps
        run: npm install

      - name: 🏗️ Lancer le build pour les tests E2E
        run: npm run build

      - name: 🛎️ Clone Laravel backend
        run: git clone ${{ secrets.LARAVEL_BACKEND_REPO_URL }} backend-laravel
      
      - name: 🛠️ Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose

      - name: 🐳 Docker Compose up Laravel
        working-directory: backend-laravel
        run: docker-compose up -d --build

      - name: ⏳ Wait for Laravel container to be healthy
        working-directory: backend-laravel
        run: |
          echo "⏳ Waiting for Laravel healthcheck to pass..."

          APP_ID=$(docker-compose ps -q app)
          if [ -z "$APP_ID" ]; then
            echo "❌ Could not find app container"
            exit 1
          fi

          for i in {1..30}; do
            STATUS=$(docker inspect -f '{{.State.Health.Status}}' "$APP_ID")
            if [ "$STATUS" = "healthy" ]; then
              echo "✅ Laravel is healthy"
              break
            fi
            echo "⏳ Laravel status: $STATUS"
            sleep 5
          done

          if [ "$STATUS" != "healthy" ]; then
            echo "❌ Laravel did not become healthy in time"
            docker-compose logs app
            exit 1
          fi

      - name: 📋 Logs Laravel (si erreur)
        if: failure()
        run: docker-compose logs app

      - name: ⚙️ Migrations
        working-directory: backend-laravel
        run: |
          docker-compose exec -T app php artisan jwt:secret --force
          docker-compose exec -T app php artisan key:generate --force
          docker-compose exec -T app php artisan migrate --seed

      - name: 👤 Créer le user Laravel pour les tests E2E
        working-directory: backend-laravel
        run: |
          docker-compose exec -T app php artisan tinker --execute "\
          \App\Models\User::updateOrCreate(
            ['email' => 'test@example.com'],
            [
              'name' => 'Test User',
              'username' => 'testuser',
              'password' => 'testpassword'
            ]
          ); \
          echo '✅ Utilisateur Laravel prêt';"
          
      - name: 🚀 Preview app
        run: npm run preview &

      - name: 🧪 Cypress E2E with Laravel
        run: npm run test:e2e
