name: CI Frontend

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: 🛎️ Checkout le code du frontend
        uses: actions/checkout@v4

      - name: 🏗️ Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: 🔥 Nettoyer node_modules et le cache npm
        run: |
          rm -rf node_modules package-lock.json
          npm cache clean --force

      - name: 📦 Installer les dépendances
        run: npm install

      - name: 🔍 Vérification du code avec ESLint
        run: npm run lint

      - name: 🔍 Vérification du formatage avec Prettier
        run: npm run format

      - name: 🏗️ Vérification des types TypeScript
        run: npm run type-check

      - name: 🏗️ Construire l'application
        run: npm run build

      - name: 🧪 Lancer les tests unitaires avec Vitest
        run: npm run test:unit

      - name: 🏗️ Construire et tester l'image Docker
        run: |
          docker build -t plant-care-front .
          docker run --rm -d -p 5173:5173 --name plant-care-test plant-care-front
          echo "Attente de 5 secondes pour que Vite démarre..."
          sleep 5  # ⏳ Attendre avant de tester la connexion
          curl --fail http://localhost:5173 || (docker logs plant-care-test && exit 1)
          docker stop plant-care-test

  test-e2e:
    runs-on: ubuntu-latest
    needs: build-and-test  # Ne lance les tests E2E que si le build réussit

    steps:
      - name: 🛎️ Checkout le code
        uses: actions/checkout@v4

      - name: 🏗️ Installer Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: 🔥 Nettoyer node_modules et le cache npm
        run: |
          rm -rf node_modules package-lock.json
          npm cache clean --force

      - name: 📦 Installer les dépendances
        run: npm install

      - name: 🏗️ Lancer le build pour les tests E2E
        run: npm run build

      - name: 🛎️ Cloner le backend
        run: git clone ${{ secrets.BACKEND_REPO_URL }} backend

      - name: 🛠️ Démarrer le backend avec Docker Compose
        working-directory: backend
        run: docker-compose up -d

      - name: 🛑 Attendre que le backend soit prêt
        run: |
          for i in {1..30}; do
            curl --fail http://localhost:8000/health && break
            echo "Backend non prêt, attente..."
            sleep 5
          done

      - name: 🚀 Démarrer le serveur de prévisualisation
        run: npm run preview &

      - name: 🧪 Lancer les tests end-to-end avec Cypress
        run: npm run test:e2e
